theme(plot.title = element_text(size = 12))
bsRobberyCrimeRate %>%
group_by(`LSOA name`) %>%
slice_sample(n = 15) %>%
summarise(total_burglaryCrimes = n(),
population = first(Population),
burglaryCrimeRate_per_10000 = (total_burglaryCrimes / population) * 10000) %>%
ungroup() %>%
mutate(percentage = total_burglaryCrimes / sum(total_burglaryCrimes) * 100,
label = paste0(round(percentage, 1), "%")) %>%
ggplot(aes(x = "", y = burglaryCrimeRate_per_10000, fill = `LSOA name`)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Burglary Crime Rate per 10,000 People in Bristol (Nov 2022)",
fill = "LSOA name") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(size = 12))
bsRobberyCrimeRate %>%
group_by(`LSOA name`) %>%
summarise(total_burglaryCrimes = n(),
population = first(Population),
burglaryCrimeRate_per_10000 = (total_burglaryCrimes / population) * 10000) %>%
ungroup() %>%
mutate(percentage = total_burglaryCrimes / sum(total_burglaryCrimes) * 100,
label = paste0(round(percentage, 1), "%")) %>%
slice_sample(n = 15) %>%
ggplot(aes(x = "", y = burglaryCrimeRate_per_10000, fill = `LSOA name`)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Burglary Crime Rate per 10,000 People in Bristol (Nov 2022)",
fill = "LSOA name") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(size = 12))
bsRobberyCrimeRate %>%
group_by(`LSOA name`) %>%
summarise(total_burglaryCrimes = n(),
population = first(Population),
burglaryCrimeRate_per_10000 = (total_burglaryCrimes / population) * 10000) %>%
ungroup() %>%
mutate(percentage = total_burglaryCrimes / sum(total_burglaryCrimes) * 100,
label = paste0(round(percentage, 1), "%")) %>%
slice_sample(n = 15) %>%
ggplot(aes(x = "", y = burglaryCrimeRate_per_10000, fill = `LSOA name`)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Burglary Crime Rate per 10,000 People in Bristol (Nov 2022)",
fill = "LSOA name") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(size = 12))
cwRobberyCrimeRate = cornwallCrimeRate %>%
filter(year(Year) == 2022 & month(Year) == 11) %>%
left_join(population_2022, by = "Postcode") %>%
filter(`Crime type` == "Burglary") %>%
filter(city == "Cornwall") %>%
filter(!is.na(Population))
View(cwRobberyCrimeRate)
dim(cwRobberyCrimeRate)
colSums(is.na(cwRobberyCrimeRate))
cwRobberyCrimeRate %>%
group_by(`LSOA name`) %>%
summarise(total_burglaryCrimes = n(),
population = first(Population),
burglaryCrimeRate_per_10000 = (total_burglaryCrimes / population) * 10000) %>%
ungroup() %>%
mutate(percentage = total_burglaryCrimes / sum(total_burglaryCrimes) * 100,
label = paste0(round(percentage, 1), "%")) %>%
slice_sample(n = 15) %>%
ggplot(aes(x = "", y = burglaryCrimeRate_per_10000, fill = `LSOA name`)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Burglary Crime Rate per 10,000 People in Cornwall (Nov 2022)",
fill = "LSOA name") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(size = 12))
cwRobberyCrimeRate %>%
group_by(`LSOA name`) %>%
summarise(total_burglaryCrimes = n(),
population = first(Population),
burglaryCrimeRate_per_10000 = (total_burglaryCrimes / population) * 10000) %>%
ungroup() %>%
mutate(percentage = total_burglaryCrimes / sum(total_burglaryCrimes) * 100,
label = paste0(round(percentage, 1), "%")) %>%
slice_sample(n = 15) %>%
ggplot(aes(x = "", y = burglaryCrimeRate_per_10000, fill = `LSOA name`)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Burglary Crime Rate per 10,000 People in Cornwall (Nov 2022)",
fill = "LSOA name") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(size = 12))
cwRobberyCrimeRate %>%
group_by(`LSOA name`) %>%
summarise(total_burglaryCrimes = n(),
population = first(Population),
burglaryCrimeRate_per_10000 = (total_burglaryCrimes / population) * 10000) %>%
ungroup() %>%
mutate(percentage = total_burglaryCrimes / sum(total_burglaryCrimes) * 100,
label = paste0(round(percentage, 1), "%")) %>%
slice_sample(n = 15) %>%
ggplot(aes(x = "", y = burglaryCrimeRate_per_10000, fill = `LSOA name`)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Burglary Crime Rate per 10,000 People in Cornwall (Nov 2022)",
fill = "LSOA name") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(size = 12))
View(drugOffenceRate)
#LINE CHART
drugOffenceRateBoxPlot = drugOffenceRate %>%
group_by(`LSOA name`, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = city, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
theme_minimal() +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
drugOffenceRateBoxPlot = drugOffenceRate %>%
group_by(Postcode, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = city, y = drug_offense_rate)) +
geom_boxplot() +
labs(title = "Distribution of Drug Offence Rates of 2022 in Bristol and Cornwall county",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
coord_cartesian(ylim = c(0, 50)) +
theme_minimal() +
scale_x_discrete(labels = c("Bristol, City of" = "Bristol",
"Cornwall" = "Cornwall")) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(`LSOA name`, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = city, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
theme_minimal() +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = city, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
theme_minimal() +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(Postcode, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = city, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
theme_minimal() +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(Postcode, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = Year, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
theme_minimal() +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(Year, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = Year, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
theme_minimal() +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(Year, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = Year, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(Year, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = as.factor(Year), y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
#LINE CHART
drugOffenceRate %>%
group_by(Year, city) %>%
summarise(drug_offenses = n(),
population = first(Population)) %>%
mutate(drug_offense_rate = drug_offenses / population * 10000) %>%
ggplot(aes(x = Year, y = drug_offense_rate)) +
geom_line() +
geom_point() +
labs(title = "Line Plot: Drug Offence Rates per 10,000 people in Bristol and Cornwall (2022)",
x = "County",
y = "Drug Offence Rate per 10,000 people") +
facet_wrap(~city) +
theme(plot.title = element_text(size = 12))
library(tidyverse)
library(lubridate)
library(plotly)
#loading of cleaned data sets
bristolHousePrice = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/house pricing/bristol-house-pricing.csv")
View(bristolHousePrice)
cornwallHousePrice = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/house pricing/cornwall-house-pricing.csv")
bcHousePrice = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/house pricing/bristol-cornwall-house-pricing.csv")
bristolBroadbandSpeed = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/broadband speed/bristol-broadband-speed.csv")
cornwallBroadbandSpeed = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/broadband speed/cornwall-broadband-speed.csv")
bcBroadbandSpeed = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/broadband speed/bristol-cornwall-broadband-speed.csv")
View(bristolBroadbandSpeed)
bs_housePrice_broadBand_2022 = inner_join(
bristolHousePrice,
bristolBroadbandSpeed,
by = c("Postcode" = "postcode space")) %>%
filter(year(Date_of_transfer) == 2022) %>%
select(Price, `Average download speed (Mbit/s)`)
bs_housePrice_broadBand_2022 = inner_join(
bristolHousePrice,
bristolBroadbandSpeed,
by = c("Postcode" = "postcode_space")) %>%
filter(year(Date_of_transfer) == 2022) %>%
select(Price, `Average download speed (Mbit/s)`)
View(bs_housePrice_broadBand_2022)
nrow(bs_housePrice_broadBand_2022)
bs_housePrice_broadBand_2022 %>%
summarise(corCoeff = cor(Price, `Average download speed (Mbit/s)`))
library(broom)
model_housePrice_broadBand = lm(Price ~ `Average download speed (Mbit/s)`, data = bs_housePrice_broadBand_2022)
summary(model_housePrice_broadBand)
fitted_model_housePrice_broadBand = augment(model_housePrice_broadBand)
summary(fitted_model_housePrice_broadBand)
View(fitted_model_housePrice_broadBand)
# Scatter plot with the line of best fit
ggplot(bs_housePrice_broadBand_2022, aes(x = `Average download speed (Mbit/s)`, y = Price)) +
geom_point(color = "blue", alpha = 0.5) +  # Scatter plot points
geom_smooth(method = "lm", se = TRUE, color = "red") +  # Line of best fit with confidence interval
labs(title = "House Price vs. Average Download Speed (Mbit/s) in Bristol (2022)",
x = "Average Download Speed (Mbit/s)",
y = "House Price (£)") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"))
options(scipen = 1000)
# Scatter plot with the line of best fit
ggplot(bs_housePrice_broadBand_2022, aes(x = `Average download speed (Mbit/s)`, y = Price)) +
geom_point(color = "blue", alpha = 0.5) +  # Scatter plot points
geom_smooth(method = "lm", se = TRUE, color = "red") +  # Line of best fit with confidence interval
labs(title = "House Price vs. Average Download Speed (Mbit/s) in Bristol (2022)",
x = "Average Download Speed (Mbit/s)",
y = "House Price (£)") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"))
housePrice_x = bs_housePrice_broadBand_2022$Price
avgDownloadSpeed_y = bs_housePrice_broadBand_2022$`Average download speed (Mbit/s)`
mean_housePrice_x = mean(housePrice_x)
mean_avgDownloadSpeed_y = mean(avgDownloadSpeed_y)
slope_Price_DownloadSpeed = sum((housePrice_x - mean_housePrice_x) * (avgDownloadSpeed_y - mean_avgDownloadSpeed_y)) / sum((housePrice_x - mean_housePrice_x)^2)
intercept_Price_DownloadSpeed = mean_avgDownloadSpeed_y - slope_Price_DownloadSpeed * mean_housePrice_x
avgDownloadSpeed_x = bs_housePrice_broadBand_2022$`Average download speed (Mbit/s)`
housePrice_y = bs_housePrice_broadBand_2022$Price
mean_avgDownloadSpeed_x = mean(avgDownloadSpeed_x)
mean_housePrice_y = mean(housePrice_y)
slope_Price_DownloadSpeed = sum((avgDownloadSpeed_x - mean_avgDownloadSpeed_x) * (housePrice_y - mean_housePrice_y)) / sum((avgDownloadSpeed_x - mean_avgDownloadSpeed_x)^2)
intercept_Price_DownloadSpeed = mean_housePrice_y - slope_Price_DownloadSpeed * mean_avgDownloadSpeed_x
#A scatter plot is created to visualize the relationship of taste and acetic
ggplot(bs_housePrice_broadBand_2022, aes(x = `Average download speed (Mbit/s)`, y = Price)) +
#The points of the plot are coloured blue and have size 2
geom_point(color = "blue", size = 2) +
#A red line of best fit is created using calculated values of intercept and slope
#geom_abline() is a function used to add a straight line to the plot
geom_abline(intercept = intercept_Price_DownloadSpeed, slope = slope_Price_DownloadSpeed, color = "red") +
labs(
title = "Impact of Average Download Speed on House Price in Bristol (2022): A Scatter Plot",
x = "Average Downloadd Speed",
y = "House Price"
) +
theme_minimal()
intercept_Price_DownloadSpeed = coef(model_housePrice_broadBand)[1]
slope_Price_DownloadSpeed = coef(model_housePrice_broadBand)[2]
#A scatter plot is created to visualize the relationship of taste and acetic
ggplot(bs_housePrice_broadBand_2022, aes(x = `Average download speed (Mbit/s)`, y = Price)) +
#The points of the plot are coloured blue and have size 2
geom_point(color = "blue", size = 2) +
#A red line of best fit is created using calculated values of intercept and slope
#geom_abline() is a function used to add a straight line to the plot
geom_abline(intercept = intercept_Price_DownloadSpeed, slope = slope_Price_DownloadSpeed, color = "red") +
labs(
title = "Impact of Average Download Speed on House Price in Bristol (2022)",
x = "Average Downloadd Speed",
y = "House Price"
) +
theme_minimal()
#A scatter plot is created to visualize the relationship of taste and acetic
ggplot(bs_housePrice_broadBand_2022, aes(x = `Average download speed (Mbit/s)`, y = Price)) +
#The points of the plot are coloured blue and have size 2
geom_point(color = "blue", size = 2) +
#A red line of best fit is created using calculated values of intercept and slope
#geom_abline() is a function used to add a straight line to the plot
geom_abline(intercept = intercept_Price_DownloadSpeed, slope = slope_Price_DownloadSpeed, color = "red") +
labs(
title = "Impact of Average Download Speed on House Price in Bristol (2022)",
x = "Average Downloadd Speed",
y = "House Price"
) +
theme_minimal()
cw_housePrice_broadBand_2022 = inner_join(
cornwallHousePrice,
cornwallBroadbandSpeed,
by = c("Postcode" = "postcode_space")) %>%
filter(year(Date_of_transfer) == 2022) %>%
select(Price, `Average download speed (Mbit/s)`)
View(cw_housePrice_broadBand_2022)
nrow(cw_housePrice_broadBand_2022)
cw_housePrice_broadBand_2022 %>%
summarise(corCoeff = cor(Price, `Average download speed (Mbit/s)`))
model_housePrice_broadBand_cw = lm(Price ~ `Average download speed (Mbit/s)`, data = cw_housePrice_broadBand_2022)
summary(model_housePrice_broadBand_cw)
intercept_Price_DownloadSpeed_cw = coef(model_housePrice_broadBand_cw)[1]
slope_Price_DownloadSpeed_cw = coef(model_housePrice_broadBand_cw)[2]
ggplot(cw_housePrice_broadBand_2022, aes(x = `Average download speed (Mbit/s)`, y = Price)) +
geom_point(color = "blue", size = 2) +
geom_abline(intercept = intercept_Price_DownloadSpeed_cw, slope = slope_Price_DownloadSpeed_cw, color = "red") +
labs(
title = "Impact of Average Download Speed on House Price in Cornwall (2022)",
x = "Average Downloadd Speed",
y = "House Price"
) +
theme_minimal()
library(tidyverse)
library(lubridate)
bristolSchools = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/schools/bristol-schools.csv")
View(bristolSchools)
cornwallSchools = read_csv("C:/Users/dell/OneDrive/Desktop/ST5014CEM/Clean data/schools/cornwall-schools.csv")
View(bristolHousePrice)
bs_housePrice_att8scr = inner_join(bristolHousePrice, bristolSchools, by = c("Postcode" = "POSTCODE")) %>%
#SUPP and NE values of ATT8SCR are removed because they aren't valid, established values
filter(year(Date_of_transfer) == 2022, Year == 2022 & ATT8SCR != "SUPP" & ATT8SCR != "NE") %>%
#The values of ATT8SCR are converted to numeric form
mutate(ATT8SCR = as.numeric(ATT8SCR)) %>%
select(Price, ATT8SCR)
View(bs_housePrice_att8scr)
bristolHousePrice2022 = bristolHousePrice %>%
filter(year(Date_of_transfer) == 2022)
View(bristolHousePrice2022)
cornwallHousePrice2022 = cornwallHousePrice %>%
filter(year(Date_of_transfer) == 2022)
bristolSchools2022 = bristolSchools %>%
filter(Year == 2022 & ATT8SCR != "SUPP" & ATT8SCR != "NE") %>%
mutate(ATT8SCR = as.numeric(ATT8SCR)) %>%
bs_housePrice_att8scr = inner_join(bristolHousePrice, bristolSchools, by = c("Postcode" = "POSTCODE")) %>%
#SUPP and NE values of ATT8SCR are removed because they aren't valid, established values
filter(year(Date_of_transfer) == 2022, Year == 2022 & ATT8SCR != "SUPP" & ATT8SCR != "NE") %>%
#The values of ATT8SCR are converted to numeric form
mutate(ATT8SCR = as.numeric(ATT8SCR)) %>%
select(Price, ATT8SCR)
bristolSchools2022 = bristolSchools %>%
filter(Year == 2022 & ATT8SCR != "SUPP" & ATT8SCR != "NE") %>%
mutate(ATT8SCR = as.numeric(ATT8SCR)) %>%
bs_housePrice_att8scr = inner_join(bristolHousePrice, bristolSchools, by = c("Postcode" = "POSTCODE")) %>%
#SUPP and NE values of ATT8SCR are removed because they aren't valid, established values
filter(year(Date_of_transfer) == 2022, Year == 2022 & ATT8SCR != "SUPP" & ATT8SCR != "NE") %>%
#The values of ATT8SCR are converted to numeric form
mutate(ATT8SCR = as.numeric(ATT8SCR)) %>%
select(Price, ATT8SCR)
bristolSchools2022 = bristolSchools %>%
filter(Year == 2022 & ATT8SCR != "SUPP" & ATT8SCR != "NE") %>%
mutate(ATT8SCR = as.numeric(ATT8SCR))
View(bristolSchools2022)
View(bristolSchools)
cornwallSchools2022 = cornwallSchools %>%
filter(Year == 2022 & ATT8SCR != "SUPP" & ATT8SCR != "NE") %>%
mutate(ATT8SCR = as.numeric(ATT8SCR))
View(cornwallSchools2022)
bs_housePrice_att8scr = inner_join(bristolHousePrice, bristolSchools, by = c("Postcode" = "POSTCODE")) %>%
select(Price, ATT8SCR)
bristolSchools2022 %>%
group_by(POSTCODE) %>%
filter(n() > 1)
bristolSchools2022 %>%
group_by(POSTCODE) %>%
filter(n() > 1)
bristolHousePrice2022
bristolHousePrice2022 %>%
group_by(Postcode) %>%
filter(n() > 1)
View(bristolHousePrice2022 %>%
group_by(Postcode) %>%
filter(n() > 1))
bristolHousePrice2022 = bristolHousePrice2022 %>%
group_by(Postcode) %>%
summarise(
Avg_Price = mean(Price, na.rm = TRUE),
.groups = 'drop')
bristolHousePrice2022 %>%
group_by(Postcode) %>%
filter(n() > 1)
bs_housePrice_att8scr = inner_join(bristolHousePrice, bristolSchools, by = c("Postcode" = "POSTCODE")) %>%
select(Avg_Price, ATT8SCR)
bristolHousePrice2022 = bristolHousePrice %>%
filter(year(Date_of_transfer) == 2022)
bs_housePrice_att8scr = inner_join(bristolHousePrice2022, bristolSchools2022, by = c("Postcode" = "POSTCODE")) %>%
select(Price, ATT8SCR)
View(bs_housePrice_att8scr)
bristolHousePrice2022 %>%
group_by(Postcode) %>%
filter(n() > 1)
bristolSchools2022 %>%
group_by(POSTCODE) %>%
filter(n() > 1)
bristolHousePrice2022 = bristolHousePrice2022 %>%
group_by(Postcode) %>%
summarise(
Avg_Price = mean(Price, na.rm = TRUE),
.groups = 'drop')
bristolHousePrice2022 %>%
group_by(Postcode) %>%
filter(n() > 1)
bs_housePrice_att8scr = inner_join(bristolHousePrice2022, bristolSchools2022, by = c("Postcode" = "POSTCODE")) %>%
select(Price, ATT8SCR)
bristolHousePrice2022 = bristolHousePrice2022 %>%
group_by(Postcode) %>%
summarise(
avgPrice = mean(Price, na.rm = TRUE),
.groups = 'drop')
bristolHousePrice2022 = bristolHousePrice %>%
filter(year(Date_of_transfer) == 2022)
bristolHousePrice2022 = bristolHousePrice2022 %>%
group_by(Postcode) %>%
summarise(
avgPrice = mean(Price, na.rm = TRUE),
.groups = 'drop')
bristolHousePrice2022 %>%
group_by(Postcode) %>%
filter(n() > 1)
bs_housePrice_att8scr = inner_join(bristolHousePrice2022, bristolSchools2022, by = c("Postcode" = "POSTCODE")) %>%
select(avgPrice, ATT8SCR)
View(bs_housePrice_att8scr)
bristolHousePrice2022 = bristolHousePrice %>%
filter(year(Date_of_transfer) == 2022)
View(bristolHousePrice2022)
bs_housePrice_att8scr = full_join(bristolHousePrice2022, bristolSchools2022, by = c("Postcode" = "POSTCODE")) %>%
select(Price, ATT8SCR)
View(bs_housePrice_att8scr)
dim(bs_housePrice_att8scr)
colSums(is.na(bs_housePrice_att8scr))
bs_housePrice_att8scr_2022 = inner_join(bristolHousePrice2022, bristolSchools2022, by = c("Postcode" = "POSTCODE")) %>%
select(Price, ATT8SCR)
View(bs_housePrice_att8scr_2022)
dim(bs_housePrice_att8scr_2022)
View(bristolSchools2022)
View(bristolHousePrice2022)
